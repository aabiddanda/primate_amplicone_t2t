#!python3

import numpy as np
import pandas as pd


configfile: "config.yaml"


rule all:
    input:
        expand(
            "results/{species}/ref.chrY.{feature}.bed",
            feature=["trf", "mappability"],
            species=list(config.keys())[0],
        ),


rule download_fasta_fastaidx:
    """Download fasta file from remote repositories. """
    output:
        fasta="results/{species}/ref.fasta.gz",
        faidx="results/{species}/ref.fasta.gzi",
    params:
        fasta=lambda wildcards: config[wildcards.species]["fasta"],
        faidx=lambda wildcards: config[wildcards.species]["faidx"],
    resources:
        time="0:30:00",
        mem_mb="5G",
    shell:
        """
        wget {params.fasta} -O {output.fasta}
        wget {params.faidx} -O {output.faidx} 
        """


rule ref_specific_mappability:
    """Generate reference-specific mappability metrics for AmpliCONE."""
    input:
        ref_fasta="results/{species}/ref.fasta.gz",
    output:
        ref_fasta="results/{species}/ref.chrY.fa",
        gem_index="results/{species}/ref.chrY.fa.gem",
        mappability="results/{species}/ref.chrY.mappability",
        mappability_bg=temp("results/{species}/ref.chrY.mappability.bg"),
        mappability_bed="results/{species}/ref.chrY.mappability.bed",
    resources:
        time="3:00:00",
        mem_mb="10G",
    params:
        out_wig=lambda wildcards: f"results/{wildcards.species}/ref.chrY",
        out_wig2=lambda wildcards: f"results/{wildcards.species}/ref.chrY.mappability",
        read_size=lambda wildcards: config[wildcards.species]["readsize"],
    threads: 24
    shell:
        """
       samtools faidx {input.ref_fasta} chrY > {output.ref_fasta}
       gem-indexer -i {output.ref_fasta} -o {output.ref_fasta} --complement emulate -T {threads} --verbose
       gem-mappability -I {output.gem_index} -l {params.read_size} -o {params.out_wig} -m 2 -e 2 -T {threads}
       gem-2-bed mappability -I {output.gem_index} -i {output.mappability} -o {params.out_wig2}
       cp {output.mappability_bg} {output.mappability_bed}
       """


rule ref_specific_repeatmasker:
    """Obtain reference-specific repeatmasker output."""
    input:
        ref_fasta=lambda wildcards: config[wildcards.species]["fasta"],
        ref_masker=lambda wildcards: config[wildcards.species]["repeatMasker"],
    output:
        repeatmasker="results/{species}/ref.repeatmasker.out",
    shell:
        "cp {input.ref_masker} {output}"


rule ref_specific_tandemrepeat:
    """Obtain reference-specific tandem repeat finder output.
    
    NOTE: this is just using the default 
    """
    input:
        fasta="results/{species}/ref.chrY.fa",
    output:
        tandem_repeat_dat="results/{species}/ref.chrY.trf.dat",
    shell:
        "trf {input.fasta} 2 7 7 80 10 50 500 -f -h -ngs > {output.tandem_repeat_dat}"


rule tandemrepeat2bed:
    """Convert tandem-repeat output to bed-output."""
    input:
        tandem_repeat_dat="results/{species}/ref.chrY.trf.dat",
    output:
        tandem_repeat_bed="results/{species}/ref.chrY.trf.bed",
    script:
        "scripts/TRFdat_to_bed.py"


# rule create_gene_def_file:
# """Create gene definition file using pblat."""
# input:
# mappability_bed="results/{species}/ref.chrY.mappability.bed",
# repeat_masker="results/{species}/ref.repeatmasker.out",
# fasta="results/{species}/ref.chrY.fa",
# tandem_repeat_bed="results/{species}/ref.chrY.trf.bed",
# seq_query = config["y_amplicon_seqs"]
# output:
# gene_def="results/{species}/ref.chrY.gene_definition.tab",
# threads: 16
# shell:
#         "pblat {input.fasta} {input.seq_query} -t=dna -q=dna -threads={threads} {output.gene_def}"
