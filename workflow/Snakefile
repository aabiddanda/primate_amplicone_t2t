#!python3

import numpy as np
import pandas as pd


configfile: "config.yaml"


# -------- Define all of the assorted targets -------- #
TARGETS = []
real_species = [
    "mPonPyg2_orangutan_borneo",
    "mPonAbel_orangutan_sumatra",
    "mPanTro3_chimp",
    "mPanPan1_bonobo",
    "mGorGor1_gorilla",
]

for species in real_species:
    for indiv in config["species"][species]["indivs"]:
        TARGETS.append(
            f"results/{species}/amplicone_results/{indiv}.Ampliconic_Summary.txt"
        )


rule all:
    input:
        TARGETS,


rule download_fasta_fastaidx:
    """Download fasta file from remote repositories. """
    output:
        fasta="results/{species}/ref.fasta.gz",
        faidx="results/{species}/ref.fasta.gzi",
    params:
        fasta=lambda wildcards: config["species"][wildcards.species]["fasta"],
        faidx=lambda wildcards: config["species"][wildcards.species]["faidx"],
    resources:
        time="0:30:00",
        mem_mb="5G",
    shell:
        """
        wget {params.fasta} -O {output.fasta}
        wget {params.faidx} -O {output.faidx} 
        """


rule ref_specific_mappability:
    """Generate reference-specific mappability metrics for AmpliCONE."""
    input:
        ref_fasta="results/{species}/ref.fasta.gz",
    output:
        ref_fasta="results/{species}/ref.chrY.fa",
        gem_index="results/{species}/ref.chrY.fa.gem",
        mappability="results/{species}/ref.chrY.mappability",
        mappability_bg="results/{species}/ref.chrY.mappability.bg",
        mappability_bed="results/{species}/ref.chrY.mappability.bed",
    resources:
        time="3:00:00",
        mem_mb="10G",
    params:
        out_wig=lambda wildcards: f"results/{wildcards.species}/ref.chrY",
        out_wig2=lambda wildcards: f"results/{wildcards.species}/ref.chrY.mappability",
        read_size=lambda wildcards: config["species"][wildcards.species]["readsize"],
    threads: 24
    shell:
        """
       samtools faidx {input.ref_fasta} chrY > {output.ref_fasta}
       gem-indexer -i {output.ref_fasta} -o {output.ref_fasta} --complement emulate -T {threads} --verbose
       gem-mappability -I {output.gem_index} -l {params.read_size} -o {params.out_wig} -m 2 -e 2 -T {threads}
       gem-2-bed mappability -I {output.gem_index} -i {output.mappability} -o {params.out_wig2}
       cp {output.mappability_bg} {output.mappability_bed}
       """


rule ref_specific_repeatmasker:
    """Obtain reference-specific repeatmasker output."""
    input:
        ref_fasta="results/{species}/ref.chrY.fa",
        ref_masker=lambda wildcards: config["species"][wildcards.species][
            "repeatMasker"
        ],
    output:
        repeatmasker="results/{species}/ref.repeatmasker.out",
    shell:
        "cp {input.ref_masker} {output}"


rule split_fasta:
    input:
        fasta="results/{species}/ref.chrY.fa",
    output:
        temp(
            expand(
                "results/{{species}}/split_fasta/chunk{c}.fa.gz",
                c=[f"{x:03d}" for x in range(1, 61)],
            )
        ),
    shell:
        "kmcp utils split-genomes -m 1 -k 1 -n 60 -j 10 -l 0 {input.fasta} -O results/{wildcards.species}/split_fasta/ --force"


rule ref_specific_tandemrepeat:
    """Obtain reference-specific tandem repeat finder output.
    
    NOTE: this is just using the default 
    """
    input:
        fasta=lambda wildcards: f"results/{wildcards.species}/split_fasta/chunk{int(wildcards.c):03d}.fa.gz",
    output:
        tmp_fasta=temp("results/{species}/split_fasta/chunk{c}.fa"),
        tandem_repeat_dat=temp("results/{species}/trf/ref.chrY.chunk{c}.trf.dat"),
    shell:
        "zcat {input.fasta} > {output.tmp_fasta}; trf {output.tmp_fasta} 2 7 7 80 10 50 500 -h -ngs > {output.tandem_repeat_dat}"


rule collect_trf_dat:
    """Collect TRF Dat Output."""
    input:
        fastas=expand("results/{{species}}/split_fasta/chunk{c}.fa", c=range(1, 61)),
        trf_dats=expand(
            "results/{{species}}/trf/ref.chrY.chunk{c}.trf.dat", c=range(1, 61)
        ),
    output:
        meta_trf_dat="results/{species}/trf/ref.chrY.trf.dat",
    script:
        "scripts/combine_split_dat.py"


rule tandemrepeat2bed:
    """Convert tandem-repeat output to bed-output."""
    input:
        tandem_repeat_dat="results/{species}/trf/ref.chrY.trf.dat",
    output:
        tandem_repeat_bed="results/{species}/ref.chrY.trf.bed",
    wildcard_constraints:
        species="|".join(config["species"].keys()),
    script:
        "scripts/TRFdat_to_bed.py"


# ------- Obtain the canonical sequences for ampliconic genes ------ #
rule create_gene_seq_match_seq:
    """Obtain the blast results for matching sequence."""
    input:
        fasta="results/{species}/ref.chrY.fa",
        seq_query=lambda wildcards: config["species"][wildcards.species][
            "ampliconic_seq"
        ],
    output:
        gene_seq_query="results/{species}/blast/ampliconic/ref.chrY.ampliconic.{gene}.fa",
        gene_blast="results/{species}/blast/ampliconic/ref.chrY.ampliconic.{gene}.blast.txt",
    params:
        min_match=99,
    threads: 16
    shell:
        """
        seqkit grep -i -r -p '{wildcards.gene}' {input.seq_query} -o {output.gene_seq_query} 
        pblat {input.fasta} {output.gene_seq_query} {output.gene_blast} -t=dna -q=dna -threads={threads} -minIdentity={params.min_match} -out=blast9
        """


rule create_control_seq_match_seq:
    """Obtain the blast results for matching sequence in the control sequences."""
    input:
        fasta="results/{species}/ref.chrY.fa",
        seq_query=lambda wildcards: config["species"][wildcards.species]["control_seq"],
    output:
        gene_seq_query="results/{species}/blast/control/ref.chrY.control.{gene}.fa",
        gene_blast="results/{species}/blast/control/ref.chrY.control.{gene}.blast.txt",
    params:
        min_match=99,
    threads: 16
    shell:
        """
        seqkit grep -i -r -p '{wildcards.gene}' {input.seq_query} -o {output.gene_seq_query} 
        pblat {input.fasta} {output.gene_seq_query} {output.gene_blast} -t=dna -q=dna -threads={threads} -minIdentity={params.min_match} -out=blast9
        """


def get_fasta_length(fasta_fp):
    """Get the length of the fasta sequences."""
    seq_len = 0.0
    with open(fasta_fp, "r") as f:
        for line in f:
            if line[0] != ">":
                seq_len += len(line.rstrip())
    return seq_len


rule filter_gene_seq_match_seq:
    """Create a set of filters for the blat results."""
    input:
        gene_seq_query="results/{species}/blast/{mode}/ref.chrY.{mode}.{gene}.fa",
        gene_blast="results/{species}/blast/{mode}/ref.chrY.{mode}.{gene}.blast.txt",
    output:
        gene_filt_blast="results/{species}/blast/{mode}/ref.chrY.{mode}.{gene}.blast.filt.bed",
    wildcard_constraints:
        mode="ampliconic|control",
    params:
        min_percent_match=99,
        min_alignment_length=lambda wildcards: 0.10
        * get_fasta_length(
            f"results/{wildcards.species}/blast/{wildcards.mode}/ref.chrY.{wildcards.mode}.{wildcards.gene}.fa"
        ),
    shell:
        """
        cat {input.gene_blast} | grep -v "#" | awk \'$3 > {params.min_percent_match} && $4 >= {params.min_alignment_length}\' > {output.gene_filt_blast}
        """


def get_gene_list(fasta_fp):
    genes = []
    with open(fasta_fp, "r") as f:
        for line in f:
            if line[0] == ">":
                genes.append(line.rstrip()[1:])
    return genes


rule collect_ampliconic_regions:
    """Collect sampled blasted regions for amplicone.
    
    NOTE: We now 1) account for at least 100 bp to be in the alignment and 2) we merge the intervals
    """
    input:
        blast_results=lambda wildcards: expand(
            "results/{{species}}/blast/ampliconic/ref.chrY.ampliconic.{gene}.blast.filt.bed",
            gene=get_gene_list(config["species"][wildcards.species]["ampliconic_seq"]),
        ),
    output:
        gene_def_bed="results/{species}/ref.amplicone.chrY.gene_def.bed",
    shell:
        """
        cat {input.blast_results} | awk \'$9 < $10 {{OFS=\"\t\"; print $2,$9,$10,\"+\", $1}} $10 < $9 {{OFS=\"\t\"; print $2,$10,$9,\"-\", $1}}\' | bedtools sort | mergeBed -c 4,5 -o collapse,collapse > {output.gene_def_bed}
        """


rule collect_control_regions:
    """Collect sampled control gene regions for amplicone.
    
    NOTE: We now 1) account for at least 100 bp to be in the alignment and 2) we merge the intervals
    """
    input:
        blast_results=lambda wildcards: expand(
            "results/{{species}}/blast/control/ref.chrY.control.{gene}.blast.filt.bed",
            gene=get_gene_list(config["species"][wildcards.species]["control_seq"]),
        ),
    output:
        control_def_raw_bed="results/{species}/ref.amplicone.chrY.control_def.raw.bed",
        control_def_bed="results/{species}/ref.amplicone.chrY.control_def.bed",
    shell:
        """
        cat {input.blast_results} | awk \'$9 < $10 {{OFS=\"\t\"; print $2,$9,$10,\"+\", $1}} $10 < $9 {{OFS=\"\t\"; print $2,$10,$9,\"-\", $1}}\' | bedtools sort | mergeBed -c 4,5 -o collapse,collapse > {output.control_def_raw_bed}
        cat {input.blast_results} | awk \'$9 < $10 {{OFS=\"\t\"; print $2,$9,$10,\"+\", \"CONTROL\"}} $10 < $9 {{OFS=\"\t\"; print $2,$10,$9,\"-\", \"CONTROL\"}}\' | bedtools sort | mergeBed -c 4,5 -o collapse,collapse > {output.control_def_bed}
        """

if '.fa' in config["species"][wildcards.species]["ampliconic_seq"]:
    rule create_full_gene_def_file:
        """Helper rule that merges together the gene definition."""
        input:
            control_def_bed="results/{species}/ref.amplicone.chrY.control_def.bed",
            gene_def_bed="results/{species}/ref.amplicone.chrY.gene_def.bed",
        output:
            gene_def_tab="results/{species}/ref.amplicone.chrY.gene_def.tab",
        shell:
            'cat {input.gene_def_bed} {input.control_def_bed} | awk \'BEGIN{{print "START\tEND\tTYPE"}}; {{OFS="\t";print $2,$3,$5}} \' > {output.gene_def_tab}'
else:
    rule create_full_gene_def_file:
        """Helper rule that merges together the gene definition."""
        input:
            control_def_bed="results/{species}/ref.amplicone.chrY.control_def.bed",
            gene_def_bed=lambda wildcards: config["species"][wildcards.species]["ampliconic_seq"],
        output:
            gene_def_tab="results/{species}/ref.amplicone.chrY.gene_def.tab",
        shell:
            'cat {input.gene_def_bed} {input.control_def_bed} | awk \'BEGIN{{print "START\tEND\tTYPE"}}; {{OFS="\t";print $2,$3,$5}} \' > {output.gene_def_tab}'

rule build_chrY_annotation:
    """Build chrY annotation for AmpliCoNE.
    NOTE: we do all this copying since the paths in the scripts are hard-coded. 
    """
    input:
        gene_def="results/{species}/ref.amplicone.chrY.gene_def.tab",
        fasta="results/{species}/ref.chrY.fa",
        tandem_repeat_bed="results/{species}/ref.chrY.trf.bed",
        mappability_bed="results/{species}/ref.chrY.mappability.bed",
        repeatmasker="results/{species}/ref.repeatmasker.out",
    output:
        chrY_anno="results/{species}/chrY_annotation.tab",
    conda:
        "../../tools/AmpliCoNE-tool/env.yaml"
    shell:
        """
        cd results/{wildcards.species}/
        cp -rf ../../../tools/AmpliCoNE-tool/bin/ .  
        sh ../../../tools/AmpliCoNE-tool/AmpliCoNE-build.sh -c chrY -i ref.chrY.fa -m ref.chrY.mappability.bed -r ref.repeatmasker.out -t ref.chrY.trf.bed -g ref.amplicone.chrY.gene_def.tab -o chrY_annotation.tab 
        rm *.sam
        cd ../../
        """


rule reformat_annotation:
    input:
        chrY_anno="results/{species}/chrY_annotation.tab",
    output:
        chrY_rev_anno="results/{species}/chrY_annotation.rev.tab",
    shell:
        "awk 'NR == 1 {{print}} NR > 1 {{OFS=\"\t\"; print int($1), $2,$3, int($4)}}' {input.chrY_anno} > {output.chrY_rev_anno}"


rule cram2bam:
    """Convert a CRAM to a BAM file.
    NOTE: the bam file will only contain chrY and 100 bp reads.
    """
    input:
        cram_file=lambda wildcards: config["species"][wildcards.species]["indivs"][
            wildcards.indiv
        ],
        test_fasta=lambda wildcards: config["species"][wildcards.species]["ref_fasta"],
    output:
        bam_file="results/{species}/bam_files/{indiv}.bam",
        bai_file="results/{species}/bam_files/{indiv}.bam.bai",
    threads: 16
    shell:
        """
        samtools view --fast --threads {threads} -e 'length(seq)>=100' -b -T {input.test_fasta} {input.cram_file} chrY > {output.bam_file} 
        samtools index -@{threads} {output.bam_file}
        """


rule run_amplicone_count:
    """Run the amplicone count script and generate appropriate output."""
    input:
        bam="results/{species}/bam_files/{indiv}.bam",
        chrY_anno="results/{species}/chrY_annotation.rev.tab",
        gene_def="results/{species}/ref.amplicone.chrY.gene_def.tab",
    output:
        "results/{species}/amplicone_results/{indiv}.Ampliconic_Summary.txt",
        "results/{species}/amplicone_results/{indiv}.XDG_CopyNumber.txt",
    params:
        outfix=lambda wildcards: f"results/{wildcards.species}/amplicone_results/{wildcards.indiv}.",
        length=lambda wildcards: config["species"][wildcards.species]["length"],
    conda:
        "../../tools/AmpliCoNE-tool/env.yaml"
    shell:
        """
        python ../tools/AmpliCoNE-tool/AmpliCoNE-count.py --GENE_DEF {input.gene_def} --ANNOTATION {input.chrY_anno} --BAM {input.bam} --CHR chrY --LENGTH {params.length} -o {params.outfix}
        """
